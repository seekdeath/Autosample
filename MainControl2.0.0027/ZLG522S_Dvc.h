//============= 函数剪裁 ====================================================================================
#define GET_DVC_INFO_EN				1			// 获取模块信息
#define PCD_CONFIG_EN				1			// 配置读写芯片
#define PCD_CLOSE_EN				1			// 关闭读写芯片
#define PCD_LOAD_KEY_EN				1			// 装载6字节密钥
#define PCD_WRITE_REG_EN			0			// 写寄存器
#define PCD_READ_REG_EN				0			// 读寄存器


#define PICC_RESET_EN				1			// 卡片复位(停止载波一段时间)
#define PICC_AUTO_DETEGT_EN			1			// 自动检测命令(6字节密钥)
#define PICC_AD_RCV_EN				1			// 中断产生后的读自动检测的数据
#define PICC_READ_AD_DT_EN			1			// 读自动检测数据的命令
//============= 常量定义 ====================================================================================
#ifndef KEY_A
	#define KEY_A					0x60
#endif

#ifndef KEY_B
	#define KEY_B					0x61
#endif
//============= 全局变量/函数声明 ===========================================================================
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 函数原型:    unsigned char GetDvcInfo(unsigned char *pDvcInfo)
// 函数功能:    获取模块信息
// 输入参数:    -		
// 输出参数:    unsigned char *pDvcInfo			// 模块信息
// 返 回 值:    命令执行结果
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned char GetDvcInfo(unsigned char *pDvcInfo);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 函数原型:    unsigned char PCDConfig()
// 函数功能:    配置读写卡芯片
// 输入参数:    -		
// 输出参数:    
// 返 回 值:    命令执行结果
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned char PCDConfig();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 函数原型:    unsigned char PCDClose()
// 函数功能:    模块信息配置
// 输入参数:    -		
// 输出参数:    
// 返 回 值:    命令执行结果
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned char PCDClose();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 函数原型:    unsigned char PCDLoadKey(unsigned char ucKeyMode, unsigned char ucKeySNr,unsigned char *pKey)
// 函数功能:    装载密钥
// 输入参数:    unsigned char ucKeyMode			// 密钥模式	KEY_A;KEY_B	
//		unsigned char ucKeySNr			// 密钥存放扇区0~3
//		unsigned char *pKey			// 6字节密钥
// 输出参数:    -
// 返 回 值:    命令执行结果
// 说    明:	若输入的密钥为6字节，则模块会自动扩展为16字节
//				Key[16] = pKey[0:5] | pKey[0:5] | pKey[0:3]
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned char PCDLoadKey(unsigned char ucKeyMode, unsigned char ucKeySNr,unsigned char *pKey);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 函数原型:    unsigned char PCDLoadKey16(unsigned char ucKeyMode, unsigned char ucKeySNr,unsigned char *pKey)
// 函数功能:    装载密钥
// 输入参数:    unsigned char ucKeyMode			// 密钥模式	KEY_A;KEY_B	
//		unsigned char ucKeySNr			// 密钥存放扇区0~3
//		unsigned char *pKey			// 16字节密钥
// 输出参数:    -
// 返 回 值:    命令执行结果
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned char PCDLoadKey16(unsigned char ucKeyMode, unsigned char ucKeySNr,
									   unsigned char *pKey);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 函数原型:    unsigned char PCDWriteReg(unsigned char ucRegAddr,unsigned char ucRegValue)
// 函数功能:    装载密钥
// 输入参数:    unsigned char ucRegAddr			// 寄存器地址
//		unsigned char ucRegValue		// 写入的值
// 输出参数:    -
// 返 回 值:    命令执行结果
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned char PCDWriteReg(unsigned char ucRegAddr,unsigned char ucRegValue);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 函数原型:    unsigned char PCDReadReg(unsigned char ucRegAddr,unsigned char *pRegValue)
// 函数功能:    读读写芯片寄存器
// 输入参数:    unsigned char ucRegAddr			// 寄存器地址			
// 输出参数:    unsigned char *pRegValue		// 读出的值
// 返 回 值:    命令执行结果
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned char PCDReadReg(unsigned char ucRegAddr,unsigned char *pRegValue);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 函数原型:    unsigned char PCDSetBaud(ucBaudNum)
// 函数功能:    改变模块的通信波特率
// 输入参数:    unsigned char ucBaudNum			// 波特率编号0～7			
// 输出参数:    -
// 返 回 值:    命令执行结果
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned char PCDSetBaud(unsigned char ucBaudNum);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 函数原型:    unsigned char PCDBind(const INT8U *pUserID,  INT8U *pPCDID)
// 函数功能:    模块绑定 
// 输入参数:    INT8U *pUserID	
// 输出参数:    INT8U *pPCDID
// 返 回 值:    命令执行结果
// 说    明:	ZLG500S-BJ的专用指令
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned char PCDBind(const unsigned char *pUserID,  unsigned char *pPCDID);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 函数原型:    unsigned char GetNINT(void);
// 函数功能:    获取中断管脚状态
// 输入参数:    	
// 输出参数:    
// 返 回 值:    管脚高低电平
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned char GetNINT(void);


